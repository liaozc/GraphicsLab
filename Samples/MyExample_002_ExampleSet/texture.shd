
struct VsIn {
	float4 position : Position;
	float4 texcoord : Texcoord;
	float4 normal : Normal;
};

struct PsIn {
	float4 position : SV_Position;
	float4 texcoord : TEXCOORD0;
	float4 Normal : NORMAL;
};

[Vertex shader]

float4x4 worldViewProj;
float4x4 worldMatrix;	//for normal

PsIn main(VsIn In){
	PsIn Out;
	Out.position = mul(worldViewProj, In.position);
	Out.texcoord = In.texcoord;
	Out.Normal = mul(worldMatrix,In.normal);
	return Out;
}

[Fragment shader]

struct PsOut {
	float4 color:SV_Target0;
};

float3  vLightDir[2];
float4  vLightColor[2];
Texture2D texDiffuse;
SamplerState fliter;
int lightIndex = 0;

PsOut main(PsIn In, bool frontFace : SV_IsFrontFace){
	PsOut Out;
	if(lightIndex == 0) {
		float4 finalColor = 0;
		for (int i = 0; i<2; i++){
			finalColor += saturate(dot((float3)vLightDir[i],In.Normal) * vLightColor[i]); 
		}

		Out.color = texDiffuse.Sample(fliter, In.texcoord) * finalColor;
		Out.color.a = 1;
	}
	else {
		Out.color =  vLightColor[lightIndex - 1];
	
	}
	return Out;
}
