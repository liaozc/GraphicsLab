
struct PsIn {
	float4 position: SV_Position;
	float3 envCoord: EnvCoord;
};

[Vertex shader]

float4x4 invViewProj;

PsIn main(uint VertexID: SV_VertexID){
	PsIn Out;

	// Produce a fullscreen triangle
	Out.position.x = (VertexID == 2)?  3.0 : -1.0;
	Out.position.y = (VertexID == 0)? -3.0 :  1.0;
	Out.position.zw = 1.0;

	Out.envCoord = mul(invViewProj, Out.position);

	return Out;
}


[Fragment shader]

Texture2DMS <float4, 8> Color;
Texture2DMS <float4, 8> Depth;
TextureCube Env;
SamplerState filter;

void compAndSwap(inout float4 c0, inout float4 c1, inout float d0, inout float d1){
	[flatten]
	if (d0 > d1){
		float4 tc = c0;
		float  td = d0;
		c0 = c1;
		d0 = d1;
		c1 = tc;
		d1 = td;
	}
}

float3 main(PsIn In) : SV_Target {
	// Sample skybox
	float3 color = Env.Sample(filter, In.envCoord);

	int3 texCoord = int3((int2) In.position, 0);

	// First sample will be filled first. If this sample is 1.0, then no sample was ever written to this pixel.
	float d0 = Depth.Load(texCoord, 0).x;
	[branch]
	if (d0 < 1.0){
		// Fetch remaining depth samples
		float d1 = Depth.Load(texCoord, 1).x;
		float d2 = Depth.Load(texCoord, 2).x;
		float d3 = Depth.Load(texCoord, 3).x;
		float d4 = Depth.Load(texCoord, 4).x;
		float d5 = Depth.Load(texCoord, 5).x;
		float d6 = Depth.Load(texCoord, 6).x;
		float d7 = Depth.Load(texCoord, 7).x;

		// Fetch the color samples
		float4 c0 = Color.Load(texCoord, 0);
		float4 c1 = Color.Load(texCoord, 1);
		float4 c2 = Color.Load(texCoord, 2);
		float4 c3 = Color.Load(texCoord, 3);
		float4 c4 = Color.Load(texCoord, 4);
		float4 c5 = Color.Load(texCoord, 5);
		float4 c6 = Color.Load(texCoord, 6);
		float4 c7 = Color.Load(texCoord, 7);

		// Sort with an odd-even mergesort
		compAndSwap(c0, c1, d0, d1);
		compAndSwap(c2, c3, d2, d3);
		compAndSwap(c4, c5, d4, d5);
		compAndSwap(c6, c7, d6, d7);

		compAndSwap(c0, c2, d0, d2);
		compAndSwap(c1, c3, d1, d3);
		compAndSwap(c4, c6, d4, d6);
		compAndSwap(c5, c7, d5, d7);

		compAndSwap(c1, c2, d1, d2);
		compAndSwap(c5, c6, d5, d6);

		compAndSwap(c0, c4, d0, d4);
		compAndSwap(c1, c5, d1, d5);
		compAndSwap(c2, c6, d2, d6);
		compAndSwap(c3, c7, d3, d7);

		compAndSwap(c2, c4, d2, d4);
		compAndSwap(c3, c5, d3, d5);

		compAndSwap(c1, c2, d1, d2);
		compAndSwap(c3, c4, d3, d4);
		compAndSwap(c5, c6, d5, d6);

		// Blend the sorted samples
		color = lerp(color, c7.rgb, c7.a);
		color = lerp(color, c6.rgb, c6.a);
		color = lerp(color, c5.rgb, c5.a);
		color = lerp(color, c4.rgb, c4.a);
		color = lerp(color, c3.rgb, c3.a);
		color = lerp(color, c2.rgb, c2.a);
		color = lerp(color, c1.rgb, c1.a);
		color = lerp(color, c0.rgb, c0.a);
	}

	return color;
}
