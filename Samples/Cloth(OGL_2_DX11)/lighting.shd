
struct VsIn {
	float4 position : Position;
	float3 normal : Normal;
	float2 texcoord : Texcoord;
};

struct PsIn {
	float4 position : SV_POSITION;
	float4 worldPos : BINORMAL;
	float2 texcoord : TEXCOORD0;
	float3 normal : NORMAL;
};

[Vertex shader]

float4x4 world;
float4x4 viewProj;

PsIn main(VsIn In){
	PsIn Out;
	Out.worldPos = mul(world,In.position);
	Out.position = mul(viewProj,Out.worldPos);
	Out.normal = mul(world,In.normal);
	Out.texcoord = In.texcoord;
	return Out;
}


[Fragment shader]

float3 lightPos;
float3 camPos;

Texture2D Base;
SamplerState Filter;

float3 main(PsIn In):SV_Target {
	float4 base = Base.Sample(Filter, In.texcoord);
	float3 norm = In.normal;
	float3 lVec = normalize(lightPos - In.worldPos);
	float3 vVec = normalize(camPos - In.worldPos);
	
	float diffuse = saturate(dot(lVec, norm));
	float specular = pow(saturate(dot(reflect(-vVec, norm), lVec)), 16.0);

	float4 rgb = (0.8 * diffuse + 0.15) * base + 0.4 * specular;
	return rgb.rgb;
}

