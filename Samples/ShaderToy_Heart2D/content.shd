
struct PsIn {
	float4 position : SV_Position;
	float2 texcoord : TEXCOORD0;
};

[Vertex shader]

PsIn main(uint VertexID : SV_VertexID)
{
	PsIn Out;
	// Produce a fullscreen triangle
	float4 position;
	position.x = (VertexID == 0)? 3.0f : -1.0f;
	position.y = (VertexID == 2)? 3.0f : -1.0f;
	position.zw = 1.0f;
	Out.position = position;
	Out.texcoord = position * float2(0.5,0.5) + 0.5;
	return Out;
}

[Fragment shader]

float2    iResolution;           // viewport resolution (in pixels)
float     iGlobalTime;           // shader playback time (in seconds)
float     iChannelTime[4];       // channel playback time (in seconds)
float3    iChannelResolution[4]; // channel resolution (in pixels)
float4    iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click

Texture2D iChannel0;          // input channel. XX = 2D/Cube
Texture2D iChannel1;
Texture2D iChannel2;
Texture2D iChannel3;

SamplerState iFilter;

float4    iDate;                 // (year, month, day, time in seconds)
float     iSampleRate;           // sound sample rate (i.e., 44100)

//******* CONTENT START *****************

// Created by inigo quilez - iq/2013
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

void mainImage( out float4 fragColor, in float2 fragCoord )
{
	float2 p = (2.0*fragCoord-iResolution.xy)/min(iResolution.y,iResolution.x);
	
    // background color
    float3 bcol = float3(1.0,0.8,0.7-0.07*p.y)*(1.0-0.25*length(p));

    // animate
    float tt = fmod(iGlobalTime,1.5)/1.5;
    float ss = pow(tt,.2)*0.5 + 0.5;
    ss = 1.0 + ss*0.5*sin(tt*6.2831*3.0 + p.y*0.5)*exp(-tt*4.0);
    p *= float2(0.5,1.5) + ss*float2(0.5,-0.5);

    // shape
#if 1
    p *= 0.8;
    p.y = -0.1 - p.y*1.2 + abs(p.x)*(1.0-abs(p.x));
    float r = length(p);
	float d = 0.5;
#else
	p.y -= 0.25;
    float a = atan(p.x,p.y)/3.141593;
    float r = length(p);
    float h = abs(a);
    float d = (13.0*h - 22.0*h*h + 10.0*h*h*h)/(6.0-5.0*h);
#endif
    
	// color
	float s = 0.75 + 0.75*p.x;
	s *= 1.0-0.4*r;
	s = 0.3 + 0.7*s;
	s *= 0.5+0.5*pow( 1.0-clamp(r/d, 0.0, 1.0 ), 0.1 );
	float3 hcol = float3(1.0,0.5*r,0.3)*s;
	
    float3 col = lerp( bcol, hcol, smoothstep( -0.01, 0.01, d-r) );

    fragColor = float4(col,1.0);
}

//******* CONTENT START *****************


float4 main(PsIn In) : SV_Target 
{
	float4 fragColor = 0;
	float2 fragCoord = In.texcoord * iResolution;
	mainImage(fragColor,fragCoord);
	return fragColor;
}
