
struct VsIn
{
	float4 Position : Position;
};

struct PsIn
{
	float4 Position : SV_Position;
};

[Vertex shader]

float4x4 ViewProj;
float3 LightPos;
float Radius;

PsIn main(VsIn In)
{
	PsIn Out;

	float4 position = In.Position;
	position.xyz *= Radius;
	position.xyz += LightPos;
	Out.Position = mul(ViewProj, position);

	return Out;
}

[Fragment shader]

#if (SAMPLE_COUNT > 1)
Texture2DMS <float4, SAMPLE_COUNT> Base;
Texture2DMS <float4, SAMPLE_COUNT> Normal;
Texture2DMS <float,  SAMPLE_COUNT> Depth;
#else
Texture2D <float4> Base;
Texture2D <float4> Normal;
Texture2D <float > Depth;
#endif

float4x4 ViewProjInv;
float2 ZBounds;
float3 CamPos;
float3 LightPos;
float InvRadiusSqr;

float3 lighting(const PsIn In, float3 base, float3 normal, float emissive, float depth)
{
	// Screen-space position
	float4 cPos = float4(In.Position.xy, depth, 1);

	// World-space position
	float4 wPos = mul(ViewProjInv, cPos);
	float3 pos = wPos.xyz / wPos.w;

	// Lighting vectors
	float3 lVec = LightPos - pos;
	float3 light_vec = normalize(lVec);
	float3 view_vec = normalize(CamPos - pos);

	float atten = saturate(1.0f - dot(lVec, lVec) * InvRadiusSqr);
	atten *= atten * atten;

	// Lighting
	float diffuse = saturate(dot(light_vec, normal));
	float specular = 0.2f * pow(saturate(dot(reflect(-view_vec, normal), light_vec)), 10.0f);

	return atten * (diffuse * base + specular) + emissive;
}

float3 main(PsIn In) : SV_Target
{
	int3 tex_coord = int3(int2(In.Position.xy), 0);

#ifdef SINGLE_SAMPLE
  #define COUNT 1
#else
  #define COUNT SAMPLE_COUNT
#endif

	float3 sum = 0.0f;

	[unroll]
	for (int i = 0; i < COUNT; i++)
	{
		float depth = Depth.Load(tex_coord, i).x;

		[branch]
		if (depth >= ZBounds.x && depth <= ZBounds.y)
		{
			float3 base = Base.Load(tex_coord, i).rgb;
			float4 normal = Normal.Load(tex_coord, i);

			sum += lighting(In, base, normal.xyz, normal.w, depth);
		}
	}
	return sum * (1.0f / COUNT);
}
