
struct VsIn {
	float4 position : Position;
	float4 normal : Normal;
	float3 tangent  : Tangent;
	float3 binormal : Binormal;
	float2 texcoord : TexCoord0;
};

struct PsIn {
	float4 position : SV_Position;
	float4 worldPos : Position0;

	float4 normal : Normal;
	float3 tangent  : Tangent;
	float3 binormal : Binormal;

	float2 texcoord :TexCoord0;
};

[Vertex shader]

float4x4 viewProj;
float4x4 worldMatrix; 
float4x4 worldMatrixNormal; // for normal

PsIn main(VsIn In){
	PsIn Out;
	Out.worldPos = mul(worldMatrix,In.position);
	Out.position = mul(viewProj, Out.worldPos);
	Out.normal = mul(worldMatrixNormal,In.normal);
	Out.tangent = mul(worldMatrixNormal,In.tangent);
	Out.binormal = mul(worldMatrixNormal,In.binormal);

	Out.texcoord = In.texcoord;
	return Out;
}

[Fragment shader]

struct PsOut {
	float4 color: SV_Target0;
};

Texture2D LightMap;
SamplerState lightMapfliter;

Texture2D tex;
Texture2D normal;
SamplerState fliter;

TextureCube shadowMap;
SamplerState shadowFilter;

float4 vMoveLightColor;
float4 vMoveLightPos;
float2 nf;
float denisty;

PsOut main(PsIn In, bool frontFace : SV_IsFrontFace){
	PsOut Out;
	Out.color.rgb = LightMap.Sample(lightMapfliter,In.texcoord).rgb;
	//Out.color.rgb = 0;
	Out.color.a = 1;

	float4 shadowCoord = In.worldPos - vMoveLightPos;		
	float4 vMoveLightDir = normalize(-shadowCoord);
	float3 dist3 = In.worldPos - vMoveLightPos;
	float dist = 1/dot(dist3,dist3);
	float shadow = 0;
	float sMax = max(max(abs(shadowCoord.x), abs(shadowCoord.y)), abs(shadowCoord.z));
	float z = (1.0 / sMax) * nf.x + nf.y;
	//shadow = shadowMap.SampleCmpLevelZero(shadowFilter, shadowCoord, z).x;
	float r = shadowMap.Sample(shadowFilter, shadowCoord);
	float3 rgb = shadowMap.Sample(shadowFilter, shadowCoord);
	if(r > z * (0.999)){
		shadow = 1;
	}

	float3 bump = normal.Sample(fliter, In.texcoord).xyz * 2.0 - 1.0;
	float3 normal = In.tangent * bump.x + In.binormal * bump.y + In.normal * bump.z;
	normal = normalize(normal);

	Out.color.rgb = Out.color.rgb + saturate(dot((float3)vMoveLightDir,normal)) * shadow * vMoveLightColor * dist * denisty;
	//Out.color.rgb = rgb;

	Out.color.rgb = tex.Sample(fliter,In.texcoord) * Out.color.rgb;
	//Out.color.rgb = normal;
	return Out;
}
