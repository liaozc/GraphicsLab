
struct VsIn {
	float4 position : Position;
};

struct PsIn {
	float4 position : SV_Position;
};

[Vertex shader]

float4x4 viewProj;
float3 lightPos;
float radius;

PsIn main(VsIn In){
	PsIn Out;

	float4 position = In.position;
	position.xyz *= radius;
	position.xyz += lightPos;
	Out.position = mul(viewProj, position);

	return Out;
}

[Fragment shader]

#if (SAMPLE_COUNT > 1)
Texture2DMS <float4, SAMPLE_COUNT> Base;
Texture2DMS <float4, SAMPLE_COUNT> Normal;
Texture2DMS <float,  SAMPLE_COUNT> Depth;
#else
Texture2D <float4> Base;
Texture2D <float4> Normal;
Texture2D <float > Depth;
#endif
SamplerState filter;

float4x4 viewProjInv;
float2 zBounds;
float3 camPos;
float3 lightPos;
float invRadius;

float3 lighting(const PsIn In, float3 base, float3 normal, float depth){
	// Screen-space position
	float4 cPos = float4(In.position.xy, depth, 1);

	// World-space position
	float4 wPos = mul(viewProjInv, cPos);
	float3 pos = wPos.xyz / wPos.w;

	// Lighting vectors
	float3 lVec = (lightPos - pos) * invRadius;
	float3 lightVec = normalize(lVec);
	float3 viewVec = normalize(camPos - pos);

	// Attenution that falls off to zero at light radius
	const float a = 0.15;
	float atten = 2 * saturate((1.0 + a) / (1.0 + (1.0 / a) * dot(lVec, lVec)) - a);

	// Lighting
	float diffuse = saturate(dot(lightVec, normal));
	float specular = 0.2 * pow(saturate(dot(reflect(-viewVec, normal), lightVec)), 10.0);

	return atten * (diffuse * base + specular);
}



float3 main(PsIn In) : SV_Target {
	int3 texCoord = int3(int2(In.position.xy), 0);

#ifdef SINGLE_SAMPLE
  #define COUNT 1
#else
  #define COUNT SAMPLE_COUNT
#endif

	float3 sum = 0;

	[unroll]
	for (int i = 0; i < COUNT; i++){
		float depth = Depth.Load(texCoord, i).x;

		[branch]
		if (depth >= zBounds.x && depth <= zBounds.y){
			float3 base = Base.Load(texCoord, i).rgb;
			float3 normal = Normal.Load(texCoord, i).xyz;

			sum += lighting(In, base, normal, depth);
		}
	}
	return sum * (1.0 / COUNT);
}
