
struct VsIn {
	float4 position : Position;
	float3 tangent  : Tangent;
	float3 binormal : Binormal;
	float3 normal   : Normal;
};

struct PsIn {
	float4 position : SV_Position;
	float2 texCoord : TexCoord;
	float3 tangent  : Tangent;
	float3 binormal : Binormal;
	float3 normal   : Normal;
};

[Vertex shader]

float4x4 mvp;
float3 camPos;

PsIn main(VsIn In){
	PsIn Out;

	Out.position = mul(mvp, In.position);
	// Compute texture coordinates by projecting against the tangent plane.
	// A more complete implementation would need a per primitive origin as well.
	Out.texCoord.x = dot(In.position.xyz, In.tangent ) * (1.0 / 512.0);
	Out.texCoord.y = dot(In.position.xyz, In.binormal) * (1.0 / 512.0);
	// Pass tangent space
	Out.tangent  = In.tangent;
	Out.binormal = In.binormal;
	Out.normal   = In.normal;

	return Out;
}


[Fragment shader]

struct PsOut {
	float3 base   : SV_Target0;
	float3 normal : SV_Target1;
};

Texture2D Base;
Texture2D Bump;
SamplerState baseFilter;

PsOut main(PsIn In){
	PsOut Out;

	float3 base = Base.Sample(baseFilter, In.texCoord).rgb;
	float3 bump = Bump.Sample(baseFilter, In.texCoord).xyz * 2.0 - 1.0;

	// Compute world-space normal
	float3 normal = In.tangent * bump.x + In.binormal * bump.y + In.normal * bump.z;
	normal = normalize(normal);

	// Fill the buffers
	Out.base = base;
	Out.normal = normal * 0.5 + 0.5;

	return Out;
}
