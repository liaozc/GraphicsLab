
struct PsIn {
	float4 position : SV_Position;
};

[Vertex shader]

PsIn main(uint VertexID: SV_VertexID){
	PsIn Out;

	// Produce a fullscreen triangle
	Out.position.x = (VertexID == 2)?  3.0 : -1.0;
	Out.position.y = (VertexID == 0)? -3.0 :  1.0;
	Out.position.zw = 1.0;

	return Out;
}

[Fragment shader]

struct PsOut {
	float4 pos: SV_Target0;
	float4 dir: SV_Target1;
};

Texture2D pos;
Texture2D dir;

float3 sprinkleDir;
float frameTime;
float3 box;

PsOut main(PsIn In){
	PsOut Out;

	int3 texCoord = int3(int2(In.position.xy), 0);

	// Sample current state
	float4 pos = pos.Load(texCoord);
	float4 dir = dir.Load(texCoord);

	pos.w += frameTime;

	if (pos.w >= 4.0){
		// Restart animation
		dir.xyz = sprinkleDir;
		pos.xyz = float3(0, -235, 0);
		pos.w -= 4.0;
	} else {
		// Gravity
		dir.y -= 500.0 * frameTime;

		// Update position
		pos.xyz += frameTime * dir;

		// Make the particles bounce on walls, floor and ceiling
		dir.xyz = ( pos > box)? -0.8 * abs(dir.xyz) : dir.xyz;
		dir.xyz = (-pos > box)?  0.8 * abs(dir.xyz) : dir.xyz;

		pos.xyz = clamp(pos.xyz, -box, box);
	}

	Out.pos = pos;
	Out.dir = dir;

	return Out;
}
