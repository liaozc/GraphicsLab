
struct VsIn
{
	float4 Position : Position;
	float2 TexCoord : TexCoord0;
	float3 Tangent  : Tangent;
	float3 Binormal : Binormal;
	float3 Normal   : Normal;
	float2 LmCoord  : TexCoord1;
};

struct PsIn
{
	float4 Position : SV_Position;
	float3 WorldPos : Position;
	float2 TexCoord : TexCoord;
	float3 Tangent  : Tangent;
	float3 Binormal : Binormal;
	float3 Normal   : Normal;
	centroid float2 LmCoord : LightMapCoord;
};

[Vertex shader]

float4x4 ViewProj;
float3 CamPos;

PsIn main(VsIn In)
{
	PsIn Out;

	Out.Position = mul(ViewProj, In.Position);
	Out.WorldPos = In.Position.xyz;
	Out.TexCoord = In.TexCoord;
	Out.Tangent  = In.Tangent;
	Out.Binormal = In.Binormal;
	Out.Normal   = In.Normal;
	Out.LmCoord  = In.LmCoord;

	return Out;
}


[Fragment shader]

Texture2D Base;
Texture2D Bump;
SamplerState Filter;

Texture2D<uint> Clusters;

Texture2DArray LightMaps;
SamplerState LmFilter;

struct Light
{
	float3 Position;
	float  Intensity;
	float3 Color;
	float  Frequency;
};

Light Lights[LIGHT_COUNT];
float3 CamPos;
uint   ActiveLightsMask;
float3 Ambient;
float  Exposure;
float2 ClusterMapSize;

float4 main(PsIn In) : SV_Target
{
	float3 base = Base.Sample(Filter, In.TexCoord).rgb;
	float3 bump = Bump.Sample(Filter, In.TexCoord).xyz;

	// Compute world-space normal
	float3 normal = normalize(In.Tangent * bump.x + In.Binormal * bump.y + In.Normal * bump.z);

	float3 view_vec = normalize(CamPos - In.WorldPos);

#if defined(NO_CLUSTERS)
	// Use all active lights
	uint light_mask = ActiveLightsMask;
#else
	// Fetch clustered light mask
	int3 coord = int3(In.LmCoord * ClusterMapSize, 0);
	uint light_mask = Clusters.Load(coord);

	light_mask &= ActiveLightsMask;
#endif

	float3 total_light = Ambient * base;
#ifdef SHOW_CLUSTERS
	float n = countbits(light_mask) * (1.0f / LIGHT_COUNT);
	return n * n;
#else

	[loop]
	while (light_mask)
	{
		// Extract a light from the mask and disable that bit
		uint i = firstbitlow(light_mask);
		light_mask &= ~(1 << i);

		const Light light = Lights[i];
		float shadow = LightMaps.SampleLevel(LmFilter, float3(In.LmCoord, i), 0);
		shadow *= shadow; // Poor man's gamma. Stored as sqrt() of value. This gives much smoother shadows than storing linear values.

		// Lighting vectors
		float3 lVec = light.Position - In.WorldPos;
		float3 light_vec = normalize(lVec);
		float3 half_vec = normalize(light_vec + view_vec);

		// Lighting
		float atten = 1.0f / (1.0f + 0.000001f * dot(lVec, lVec));
		atten *= shadow * light.Intensity;

		float diffuse = saturate(dot(light_vec, normal));
		float specular = 0.3f * pow(saturate(dot(half_vec, normal)), 10.0f);

		total_light += atten * (diffuse * base + specular) * light.Color.rgb;
	}

	// Tonemapping
	total_light = 1.0f - exp2(-Exposure * total_light);

	return float4(total_light, 1.0f);
#endif
}
