
struct VsIn {
	float4 position : Position;
	float2 texCoord : TexCoord;
	float3 tangent  : Tangent;
	float3 binormal : Binormal;
	float3 normal   : Normal;
};

struct PsIn {
	float4 position    : SV_Position;
	float3 texCoord    : TexCoord;
	float3 tangent     : Tangent;
	float3 binormal    : Binormal;
	float3 normal      : Normal;
};

[Vertex shader]

float4x4 viewProj;
float3 camPos;

PsIn main(VsIn In){
	PsIn Out;

	Out.position = mul(viewProj, In.position);
	Out.texCoord.xy = In.texCoord;
	Out.texCoord.z = 0;

	// Pass tangent space
	Out.tangent  = In.tangent;
	Out.binormal = In.binormal;
	Out.normal   = In.normal;

	return Out;
}


[Fragment shader]

struct PsOut {
	float4 base   : SV_Target0;
	float3 normal : SV_Target1;
};

Texture2D Base;
Texture2D Bump;
SamplerState baseFilter;

PsOut main(PsIn In, bool isFrontFacing : SV_IsFrontFace){
	PsOut Out;

	float4 base = Base.Sample(baseFilter, In.texCoord);
	float4 bump;
	// Restore z from the two channel 3Dc/BC5 format
	bump.xy = Bump.Sample(baseFilter, In.texCoord).xy * 2.0 - 1.0;
	//bump.z = sqrt(saturate(1.0 - dot(bump.xy, bump.xy)));
	bump.zw = float2(1, -1);
	bump.z = sqrt(saturate(dot(bump.xyz, -bump.xyw))); // Yay, one instruction less :)

	// Compute world-space normal
	float3 normal = In.tangent * bump.x + In.binormal * bump.y + In.normal * bump.z;
	normal = normalize(normal);

	// Fill the buffers
	Out.base = base;
	Out.normal = normal * (isFrontFacing? 0.5 : -0.5) + 0.5;

	return Out;
}
