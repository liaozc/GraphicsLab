
struct PsIn {
	float4 position : SV_Position;
	float2 texCoord : TexCoord;
	float2 zBounds  : ZBounds;
};

[Vertex shader]

float4 main() : SV_Position {
	return 0;
}

[Geometry shader]

float4x4 view;
float ex, ey;
float2 zw;
float3 lightPos;
float lightRadius;

/*
	Compute the bounds of the light. Returns false if the light is outside of view.
*/
bool getScreenBox(const float3 pos, const float radius, out float lp, out float rp, out float tp, out float bp, out float zn, out float zf){
	float4 lightPos = mul(view, float4(pos, 1.0));

	// Compute z-bounds. Simplified code assuming standard projection matrix.
	float z1 = lightPos.z + radius;
	if (z1 <= 0) return false; // Light fully behind viewer

	float z0 = max(lightPos.z - radius, 0.00001);

	zn = saturate(zw.x + zw.y / z0);
	zf = saturate(zw.x + zw.y / z1);


	float radiusSqr = radius * radius;

	lp = 0;
	rp = 1;
	bp = 0;
	tp = 1;

	// Compute extents in X
	float Lxz = dot(lightPos.xz, lightPos.xz);
	float iLxz = 1.0 / Lxz;
	float a = radius * lightPos.x * iLxz;
	float b = (radiusSqr - lightPos.z * lightPos.z) * iLxz;
	float f = -b + a * a;

	if (f > 0){
		float Nx0 = a + sqrt(f);
		float Nx1 = a - sqrt(f);
		float Nz0 = (radius - Nx0 * lightPos.x) / lightPos.z;
		float Nz1 = (radius - Nx1 * lightPos.x) / lightPos.z;
		float N0 = Nz0 / Nx0;
		float N1 = Nz1 / Nx1;

		float x0 = saturate(0.5 - N0 * ex);
		float x1 = saturate(0.5 - N1 * ex);

		float Pz0 = (Lxz - radiusSqr) / (lightPos.z - lightPos.x * N0);
		float Pz1 = (Lxz - radiusSqr) / (lightPos.z - lightPos.x * N1);

		float Px0 = -Pz0 * N0;
		float Px1 = -Pz1 * N1;

		if (Px0 > lightPos.x) rp = x0;
		if (Px0 < lightPos.x) lp = x0;
		if (Px1 > lightPos.x && x1 < rp) rp = x1;
		if (Px1 < lightPos.x && x1 > lp) lp = x1;
	}

	// Compute extents in Y
	float Lyz = dot(lightPos.yz, lightPos.yz);
	float iLyz = 1.0 / Lyz;
	a = radius * lightPos.y * iLyz;
	b = (radiusSqr - lightPos.z * lightPos.z) * iLyz;
	f = -b + a * a;

	if (f > 0){
		float Ny0 = a + sqrt(f);
		float Ny1 = a - sqrt(f);
		float Nz0 = (radius - Ny0 * lightPos.y) / lightPos.z;
		float Nz1 = (radius - Ny1 * lightPos.y) / lightPos.z;
		float N0 = Nz0 / Ny0;
		float N1 = Nz1 / Ny1;

		float y0 = saturate(0.5 - N0 * ey);
		float y1 = saturate(0.5 - N1 * ey);

		float Pz0 = (Lyz - radiusSqr) / (lightPos.z - lightPos.y * N0);
		float Pz1 = (Lyz - radiusSqr) / (lightPos.z - lightPos.y * N1);

		float Py0 = -Pz0 * N0;
		float Py1 = -Pz1 * N1;

		if (Py0 > lightPos.y) tp = y0;
		if (Py0 < lightPos.y) bp = y0;
		if (Py1 > lightPos.y && y1 < tp) tp = y1;
		if (Py1 < lightPos.y && y1 > bp) bp = y1;
	}

	return (lp < rp && bp < tp);
}

[maxvertexcount(4)]
void main(point void In[1], inout TriangleStream<PsIn> Stream){
	PsIn Out;

	float x0, y0, x1, y1, z0, z1;
	if (getScreenBox(lightPos, lightRadius, x0, x1, y0, y1, z0, z1)){
		Out.zBounds = float2(z0, z1);		
		Out.position.zw = 1;

		// Output a clip-space rectangle for the light
		Out.position.xy = float2(x0, y0) * 2.0 - 1.0;
		Out.texCoord.xy = Out.position.xy * float2(0.5, -0.5) + 0.5;
		Stream.Append(Out);

		Out.position.xy = float2(x1, y0) * 2.0 - 1.0;
		Out.texCoord.xy = Out.position.xy * float2(0.5, -0.5) + 0.5;
		Stream.Append(Out);

		Out.position.xy = float2(x0, y1) * 2.0 - 1.0;
		Out.texCoord.xy = Out.position.xy * float2(0.5, -0.5) + 0.5;
		Stream.Append(Out);

		Out.position.xy = float2(x1, y1) * 2.0 - 1.0;
		Out.texCoord.xy = Out.position.xy * float2(0.5, -0.5) + 0.5;
		Stream.Append(Out);
	}
}

[Fragment shader]

Texture2DArray Base;
Texture2DArray Normal;
Texture2DArray Depth;
SamplerState filter;

TextureCube Shadow;
SamplerComparisonState shadowFilter;

float4x4 invViewProj;
float3 lightPos;
float invLightRadiusSqr;
float3 camPos;
float2 nf;

float3 main(PsIn In) : SV_Target {
	float3 color = 0;

	float3 texCoord = float3(In.texCoord, 0);
	float blend = 1;

	[unroll]
	for (int i = 0; i < LAYERS; i++){
		[branch]
		if (blend > 0.0)
		{
			texCoord.z = i;

			float depth = Depth.SampleLevel(filter, texCoord, 0).x;
			float4 base = Base.SampleLevel(filter, texCoord, 0);

			// Only do lighting if depth is within the z-bounds of the light
			[branch]
			if (depth > In.zBounds.x && depth < In.zBounds.y){
				float3 normal = Normal.SampleLevel(filter, texCoord, 0).rgb * 2.0 - 1.0;

				// Clip-space position, except x and y scale-biased (the invViewProj has this prebaked into it)
				float4 cPos = float4(In.texCoord.xy, depth, 1);

				// World-space position
				float4 wPos = mul(invViewProj, cPos);
				float3 pos = wPos.xyz / wPos.w;

				// Lighting
				float3 lVec = pos - lightPos;
				float3 shadowCoord = lVec;

				float3 lightVec = normalize(-lVec);

				float atten = saturate(1.0 - dot(lVec, lVec) * invLightRadiusSqr);
				float diffuse = saturate(dot(lightVec, normal));

				// Compute the shadow map comparison depth for the face we're currently sampling from
				float sMax = max(max(abs(shadowCoord.x), abs(shadowCoord.y)), abs(shadowCoord.z));
				float z = (1.0 / sMax) * nf.x + nf.y;

				float shadow = Shadow.SampleCmpLevelZero(shadowFilter, shadowCoord, z).x;

				float3 viewVec = normalize(camPos - pos);
				float specular = pow(saturate(dot(reflect(-viewVec, normal), lightVec)), 16.0);
				float3 lighting = atten * shadow * (diffuse * base.rgb + 0.3 * specular);

				// Blend in this layer
				color += (blend * base.a) * lighting;
			}
			// Update blend factor
			blend *= 1.0 - base.a;
		}
	}

	return color;
}
