
struct VsIn {
	float4 pos : Position;
	float4 normal : Normal;
};

struct PsIn {
	float4 pos : SV_Position;
	float3 normal : NORMAL;
	float3 worldPos : BINORMAL;
};

[Vertex shader]

float4x4 world;
float4x4 worldViewProj;

PsIn main(VsIn In)
{
	PsIn Out;
	Out.pos = mul(worldViewProj,In.pos);
	Out.normal = In.normal;
	Out.worldPos = mul(world,In.pos);
	return Out;
}

[Fragment shader]

float4x4 lightViewMatrix;

Texture2D shadowMap;
SamplerComparisonState smFliter;
SamplerState tempSS;
int fliterType = 0;

float3 main(PsIn In):SV_Target
{
	float4 pos = mul(lightViewMatrix,float4(In.worldPos,1));
	pos /= pos.w;
	float2 texcoord = pos.xy;
	float lvZ = pos.z;
	texcoord = (texcoord + float2(1,1)) * float2(0.5,0.5);
	texcoord.y = 1 - texcoord.y;

	float fPercentLit = 0;
	if(fliterType == 0){
		lvZ -= 0.002;
		fPercentLit += shadowMap.SampleCmpLevelZero(smFliter,texcoord,lvZ);	
	}
	else {
		float4 shadow = shadowMap.Sample(tempSS,texcoord);
		float  fAvgZ  = shadow.x; // Filtered z
		float  fAvgZ2 = shadow.y; // Filtered z-squared
	   if ( lvZ <= fAvgZ ) {
			fPercentLit = 1;
		}
		else {
			float variance = ( fAvgZ2 ) - ( fAvgZ * fAvgZ );
			variance = min( 1.0f, max( 0.0f, variance + 0.00001f ) );
			float mean     = fAvgZ;
			float d        = lvZ - mean; // We put the z value in w so that we can index the texture array with Z.
			float p_max    = variance / ( variance + d*d );
			// To combat light-bleeding, experiment with raising p_max to some power
			// (Try values from 0.1 to 100.0, if you like.)
			fPercentLit = pow( p_max, 4 );    
		}
	}
	
	float3 lightDir0 = float3(1,0.5,1);
	float light = 0;
	light += saturate(dot(In.normal,lightDir0));
	light *= 0.5;
	return float3(light.xxx) * fPercentLit + float3(0.2,0.2,0.2);
}